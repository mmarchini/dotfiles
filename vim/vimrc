if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

let $FZF_DEFAULT_COMMAND = "rg --files --hidden --follow --glob '!.git'"

call plug#begin('~/.vim/plugged')
  Plug 'https://github.com/junegunn/vim-github-dashboard.git'
  " On-demand loading
  Plug 'scrooloose/nerdtree'

  Plug 'itchyny/lightline.vim'

  " Plug 'w0rp/ale'

  Plug 'maximbaz/lightline-ale'

  Plug 'scrooloose/nerdcommenter'

  Plug 'tpope/vim-fugitive'

  Plug 'tpope/vim-surround'

  Plug 'airblade/vim-gitgutter'

  Plug 'vim-scripts/MultipleSearch'
  " Plug 'rrethy/vim-illuminate'

  " Plug 'valloric/youcompleteme'
  if executable('node')
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
  endif
  " Plug 'neoclide/coq_nvim', {'branch': 'coq'}

  Plug 'dietsche/vim-lastplace'
  Plug 'ntpeters/vim-better-whitespace'
  Plug 'merlinrebrovic/focus.vim'

  Plug 'majutsushi/tagbar'

  " Plug 'octol/vim-cpp-enhanced-highlight'
  Plug 'bfrg/vim-c-cpp-modern'
  Plug 'kelan/gyp.vim'
  Plug 'godlygeek/tabular'
  Plug 'plasticboy/vim-markdown'

  Plug 'cocopon/iceberg.vim'
  Plug 'morhetz/gruvbox'
  Plug 'catppuccin/vim', { 'as': 'catppuccin' }
  " Plug 'flazz/vim-colorschemes'
  Plug 'felixhummel/setcolors.vim'
  " Plug 'luochen1990/rainbow'

  Plug 'jasonccox/vim-wayland-clipboard'

  Plug 'vim-scripts/ctags.vim'

  " Uncomment if developing
  " Plug '~/workspace/mmarchini/bpftrace.vim'
  Plug 'mmarchini/bpftrace.vim'

  Plug 'pangloss/vim-javascript'
  Plug 'maxmellon/vim-jsx-pretty'
  Plug 'rhysd/vim-llvm'
  Plug 'supercollider/scvim'

  Plug 'leafgarland/typescript-vim'
  Plug 'sirtaj/vim-openscad'

  " Plugin outside ~/.vim/plugged with post-update hook
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
  Plug 'junegunn/fzf.vim'

  Plug 'vimwiki/vimwiki'
call plug#end()

map <C-n> :NERDTreeToggle<CR>
nmap <C-p> :Files<CR>
" nmap <C-S-p> :Commands<CR>
" nmap <C-p> :Rg<CR>
nmap <C-k> :TagbarToggle<CR>
nmap <leader>f :Rg<CR>
nmap <leader>. :Tags<CR>

nmap <leader>bb :belowright :terminal npm install<CR>

let g:gruvbox_contrast_dark='hard'
silent! colorscheme catppuccin_mocha
" colorscheme iceberg

let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'

let g:strip_whitespace_confirm=0
let g:better_whitespace_enabled=1
let g:strip_whitespace_on_save=1
let g:vim_markdown_folding_disabled = 1
let g:focusmode_width = 90
let g:rainbow_active = 1

let g:vim_jsx_pretty_colorful_config = 1

let g:ale_open_list = 1

let g:ale_echo_msg_format = '%linter% says %s'

let g:ale_linters = {
\   'python': ['pyflakes'],
\   'c': [],
\   'cpp' : [],
\}

" BEGIN Lightline ALE integration
let g:lightline = {'colorscheme': 'catppuccin_mocha'}

let g:lightline.component = {
      \   'tagbar': '%{tagbar#currenttag("%s", "")}',
      \ }

let g:lightline.component_expand = {
      \  'linter_checking': 'lightline#ale#checking',
      \  'linter_warnings': 'lightline#ale#warnings',
      \  'linter_errors': 'lightline#ale#errors',
      \  'linter_ok': 'lightline#ale#ok',
      \ }

let g:lightline.component_type = {
      \     'linter_checking': 'left',
      \     'linter_warnings': 'warning',
      \     'linter_errors': 'error',
      \     'linter_ok': 'left',
      \ }

let g:lightline.active = {
  \ 'left': [
  \   [ 'mode', 'paste' ],
  \   [ 'fugitive', 'filename' ],
  \   ['ctrlpmark', 'tagbar']
  \ ],
  \ 'right': [
  \   [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ],
  \   [ 'lineinfo' ],
  \   [ 'percent' ],
  \   [ 'fileformat', 'fileencoding', 'filetype', 'charvaluehex' ] ] }
" END

" BEGIN vimwiki
autocmd BufNewFile ~/vimwiki/diary/[0-9]*.wiki :silent %!echo "= `date -d '%:t:r' +'\%Y-\%d-\%m'` =\n\n== Things Done ==\n\n"
" END

let g:coc_global_extensions = [ 'coc-tsserver', 'coc-rust-analyzer', 'coc-pyright', 'coc-json' ]

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent><nowait> [g <Plug>(coc-diagnostic-prev)
nmap <silent><nowait> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent><nowait> gd <Plug>(coc-definition)
nmap <silent><nowait> gy <Plug>(coc-type-definition)
nmap <silent><nowait> gi <Plug>(coc-implementation)
nmap <silent><nowait> gr <Plug>(coc-references)


" Show hover when provider exists, fallback to vim's builtin behavior.
function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('definitionHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

" Visual
syn on
set background=dark
set number
set nowrap
set hlsearch
set laststatus=2

" Coding style
set sw=2
set expandtab
set shiftround
set backspace=indent,eol,start

" Other
set mouse=a

set showcmd
set showmatch
set incsearch
set ignorecase

highlight ColorColumn ctermbg=gray
set colorcolumn=80

highlight Normal ctermbg=None
set exrc
set secure
set termguicolors
set foldmethod=syntax
set foldlevelstart=99
